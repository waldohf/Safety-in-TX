		</div>
		<div class="grid_4">
			<h2>{{ series.count.0.0.0|date:"F" }}</h2>
			<div id="series_count_0" class="normal graph"></div>
		</div>
		<div class="grid_4">
			<h2>{{ series.count.1.0.0|date:"F" }}</h2>
			<div id="series_count_1" class="normal graph"></div>
		</div>
		<div class="grid_4">
			<h2>{{ series.count.2.0.0|date:"F" }}</h2>
			<div id="series_count_2" class="normal graph"></div>
		</div>
		<div class="clear"></div>
		<div class="grid_4">
			<div id="series_total_0" class="normal graph"></div>
		</div>
		<div class="grid_4">
			<div id="series_total_1" class="normal graph"></div>
		</div>
		<div class="grid_4">
			<div id="series_total_2" class="normal graph"></div>
		</div>
		<div class="grid_12">
			<h2>Paid amount (avg.)</h2>
			<div id="series_total" class="wide graph"></div>
		</div>

		
		------------------------

		{% graph "series_total" "total" "opt_total_wide" %}

		{% graph "series_count_0" "count_0" "opt_count" %}
		{% graph "series_count_1" "count_1" "opt_count" %}
		{% graph "series_count_2" "count_2" "opt_count" %}

		{% graph "series_total_0" "total_0" "opt_total" %}
		{% graph "series_total_1" "total_1" "opt_total" %}
		{% graph "series_total_2" "total_2" "opt_total" %}
		
		
		==================================
		
		body {
    background: black url("images/caverlee_guitar.png") repeat right bottom;
}

.container {
    background-color: #FFF;
}

<hr />
<br /><br /><br /><br /><br /><br /><br /><br /><br /><br />

{% for key, job in jobs.items %}
    {% if job.bookmark %}
	<b>{{ job.date }}</b> ---- <mark><a href="{{ job.link }}">{{ job.title }}</a></mark>
	<hr />
    {% else %}
	<b>{{ job.date }}</b> ---- <a href="{{ job.link }}">{{ job.title }}</a>
	<hr />
    {% endif %}
{% endfor %}

--------------------------------------------

{% extends 'safetexas/bootstrap.html' %}

{% load bootstrap3 %}

{% block bootstrap3_content %}
<div class="container">

{% block title %}{% endblock %}

<br />

{% block content %}

{{ dallas.crimes.last_month }}
{% for k, stat in stats.items %}
    <h2>{{ k }}</h2>
    <table class="table table-striped">
    {% for key, stat in stat.items %}
	<tr>
	    <td>
	    <b>{{ key }}</b> <br />
	    </td>
	{% for ktwo, statTwo in stat.items %}
	    <td>
	    {{ ktwo }} {{ statTwo }}<br />
	    </td>
	{% endfor %}
	</tr>
    {% endfor %}
    </table>
{% endfor %}

{% endblock %}

{% endblock %}

------------------------------------------------


	{% load googlecharts %}

	{% googlecharts %}
		{% data series.count.0 "count_0" %}
			{% col "string" "Date" %}"{{ val|date:"M j" }}"{% endcol %}
			{% col "number" "# of payments" %}{{ val }}{% endcol %}
		{% enddata %}

		{% data series.count.1 "count_1" %}
			{% col "string" "Date" %}"{{ val|date:"M j" }}"{% endcol %}
			{% col "number" "# of payments" %}{{ val }}{% endcol %}
		{% enddata %}

		{% data series.count.2 "count_2" %}
			{% col "string" "Date" %}"{{ val|date:"M j" }}"{% endcol %}
			{% col "number" "# of payments" %}{{ val }}{% endcol %}
		{% enddata %}

		{% data series.count_3 "count" %}
			{% col "string" "Date" %}"{{ val|date:"M j" }}"{% endcol %}
			{% col "number" "# of payments" %}{{ val }}{% endcol %}
		{% enddata %}

		{% data series.total.0 "total_0" %}
			{% col "string" "Date" %}"{{ val|date:"M j" }}"{% endcol %}
			{% col "number" "Paid amount" %}{v:{{ val }},f:"${{ val|floatformat:2 }}"}{% endcol %}
		{% enddata %}

		{% data series.total.1 "total_1" %}
			{% col "string" "Date" %}"{{ val|date:"M j" }}"{% endcol %}
			{% col "number" "Paid amount" %}{v:{{ val }},f:"${{ val|floatformat:2 }}"}{% endcol %}
		{% enddata %}

		{% data series.total.2 "total_2" %}
			{% col "string" "Date" %}"{{ val|date:"M j" }}"{% endcol %}
			{% col "number" "Paid amount" %}{v:{{ val }},f:"${{ val|floatformat:2 }}"}{% endcol %}
		{% enddata %}

		{% data series.total_3 "total" %}
			{% col "string" "Date" %}"{{ val|date:"M j" }}"{% endcol %}
			{% col "number" "Paid amount (avg.)" %}{v:{{ val }},f:"${{ val|floatformat:2 }}"}{% endcol %}
		{% enddata %}

		options = {
			backgroundColor: "#f9f9f9",
			colors: ["#09f"],
			gridlineColor: "#ddd",
			legend: "none",
			vAxis: {minValue: 0},
			chartArea: {left: 40, top: 20, width: 240, height: 180},
			width: 300,
			height: 240
		};

		options_wide = _clone(options);
		options_wide.chartArea.width = 880;
		options_wide.width = 940;

		{% options "opt_count" %}
			kind: "LineChart",
			options: options
		{% endoptions %}

		{% options "opt_count_wide" %}
			kind: "LineChart",
			options: options_wide
		{% endoptions %}

		{% options "opt_total" %}
			kind: "ColumnChart",
			options: options
		{% endoptions %}

		{% options "opt_total_wide" %}
			kind: "ColumnChart",
			options: options_wide
		{% endoptions %}
		
		{# named data and options can be reused #}
		{% data values "out_data" %}
		    {% col "string" "Name" %}"{{ val }}"{% endcol %}
		    {% col "number" "Value" %}{{ val }}{% endcol %}
		{% enddata %}
		{# you can also use global javascript variables here, #}
		{# and call functions #}
		{% options "out_options" %}
		    kind: "PieChart",
		    options: {
			width: 800,
			height: 400
		    }
		{% endoptions %}
		{# chart is assembled from container, data and options #}

		{% graph "series_count" "count" "opt_count_wide" %}

		

		{% graph "out1" "out_data" "out_options" %}
		{% graph "out2" "out_data" "out_options" %}
	{% endgooglecharts %}

---------------

class DallasView(FormView):
    template_name = 'safetexas/dallas.html'
    form_class = GenerateForm
    
    def pagination_data(self):
	lines = [ ]
        paginator = Paginator(lines, 10)
        page = self.request.GET.get('page')
        try:
            show_lines = paginator.page(page)
        except PageNotAnInteger:
            # If page is not an integer, deliver first page.
            show_lines = paginator.page(1)
        except EmptyPage:
            # If page is out of range (e.g. 9999), deliver last page of results.
            show_lines = paginator.page(paginator.num_pages)
        return show_lines

    def chart_data(self):
	series = {'count': [], 'total': []}
	queryset = Payment.objects.all()
	y = 2011
	for m in range(1, 4):
	    start = datetime(y, m, 1)
	    end = start + relativedelta(months=1)
	    series['count'].append(time_series(queryset, 'datetime', [start, end]))
	    series['total'].append(time_series(queryset, 'datetime', [start, end], func=Sum('amount')))

	start = datetime(y, 1, 1)
	end = start + relativedelta(months=3)
	series['count_3'] = time_series(queryset, 'datetime', [start, end])
	series['total_3'] = time_series(queryset, 'datetime', [start, end], func=Avg('amount'))


	return series
  
    def get_context_data(self, **kwargs):
	context = super(DallasView, self).get_context_data(**kwargs)
	values =  [ ['foo', 132], ['bar', 64], ['baz', 96] ]
	context['values'] = values
	context['series'] = self.chart_data()
	context['lines'] = self.pagination_data()
	return context